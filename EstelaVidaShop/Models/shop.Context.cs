//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EstelaVidaShop.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class shopEntities : DbContext
    {
        public shopEntities()
            : base("name=shopEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Composition> Composition { get; set; }
        public virtual DbSet<Material> Material { get; set; }
        public virtual DbSet<Month> Month { get; set; }
        public virtual DbSet<Payroll> Payroll { get; set; }
        public virtual DbSet<Poluchenie_kredita> Poluchenie_kredita { get; set; }
        public virtual DbSet<Position> Position { get; set; }
        public virtual DbSet<Procent> Procent { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Production> Production { get; set; }
        public virtual DbSet<Purchase> Purchase { get; set; }
        public virtual DbSet<Sale> Sale { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<unit> unit { get; set; }
        public virtual DbSet<Vyplata_kredita> Vyplata_kredita { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<Budjet> Budjet { get; set; }
    
        public virtual int buyMaterial(Nullable<int> material, Nullable<decimal> count, Nullable<int> worker, Nullable<decimal> sum)
        {
            var materialParameter = material.HasValue ?
                new ObjectParameter("material", material) :
                new ObjectParameter("material", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(decimal));
    
            var workerParameter = worker.HasValue ?
                new ObjectParameter("worker", worker) :
                new ObjectParameter("worker", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("buyMaterial", materialParameter, countParameter, workerParameter, sumParameter);
        }
    
        public virtual int check_payroll(Nullable<decimal> total, ObjectParameter result)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("check_payroll", totalParameter, result);
        }
    
        public virtual int Count_Product(Nullable<decimal> kol, Nullable<int> product, ObjectParameter result)
        {
            var kolParameter = kol.HasValue ?
                new ObjectParameter("kol", kol) :
                new ObjectParameter("kol", typeof(decimal));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Count_Product", kolParameter, productParameter, result);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetCount(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetCount", nameParameter);
        }
    
        public virtual int Kredit(Nullable<int> idK, Nullable<decimal> sum, Nullable<System.DateTime> date)
        {
            var idKParameter = idK.HasValue ?
                new ObjectParameter("IdK", idK) :
                new ObjectParameter("IdK", typeof(int));
    
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Kredit", idKParameter, sumParameter, dateParameter);
        }
    
        public virtual int Kredit_info(Nullable<int> id_VK_I, Nullable<int> id_kredita_I, Nullable<System.DateTime> data_VK_I)
        {
            var id_VK_IParameter = id_VK_I.HasValue ?
                new ObjectParameter("id_VK_I", id_VK_I) :
                new ObjectParameter("id_VK_I", typeof(int));
    
            var id_kredita_IParameter = id_kredita_I.HasValue ?
                new ObjectParameter("id_kredita_I", id_kredita_I) :
                new ObjectParameter("id_kredita_I", typeof(int));
    
            var data_VK_IParameter = data_VK_I.HasValue ?
                new ObjectParameter("data_VK_I", data_VK_I) :
                new ObjectParameter("data_VK_I", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Kredit_info", id_VK_IParameter, id_kredita_IParameter, data_VK_IParameter);
        }
    
        public virtual int Money(Nullable<decimal> sum, ObjectParameter result)
        {
            var sumParameter = sum.HasValue ?
                new ObjectParameter("sum", sum) :
                new ObjectParameter("sum", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Money", sumParameter, result);
        }
    
        public virtual int Production_count(Nullable<decimal> kol, Nullable<int> product, ObjectParameter result)
        {
            var kolParameter = kol.HasValue ?
                new ObjectParameter("kol", kol) :
                new ObjectParameter("kol", typeof(decimal));
    
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Production_count", kolParameter, productParameter, result);
        }
    
        public virtual int ProductionProduct(Nullable<int> product, Nullable<decimal> count, Nullable<int> worker)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(decimal));
    
            var workerParameter = worker.HasValue ?
                new ObjectParameter("worker", worker) :
                new ObjectParameter("worker", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductionProduct", productParameter, countParameter, workerParameter);
        }
    
        public virtual int saleProduct(Nullable<int> product, Nullable<decimal> count, Nullable<int> worker)
        {
            var productParameter = product.HasValue ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(decimal));
    
            var workerParameter = worker.HasValue ?
                new ObjectParameter("worker", worker) :
                new ObjectParameter("worker", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("saleProduct", productParameter, countParameter, workerParameter);
        }
    
        public virtual ObjectResult<Sostav_Result> Sostav(Nullable<int> product_id)
        {
            var product_idParameter = product_id.HasValue ?
                new ObjectParameter("product_id", product_id) :
                new ObjectParameter("product_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sostav_Result>("Sostav", product_idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_InfoProduct_Result> SP_InfoProduct(Nullable<int> prod)
        {
            var prodParameter = prod.HasValue ?
                new ObjectParameter("prod", prod) :
                new ObjectParameter("prod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InfoProduct_Result>("SP_InfoProduct", prodParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Worker_info_Result> Worker_info(Nullable<int> worker, Nullable<int> month, Nullable<int> year)
        {
            var workerParameter = worker.HasValue ?
                new ObjectParameter("worker", worker) :
                new ObjectParameter("worker", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Worker_info_Result>("Worker_info", workerParameter, monthParameter, yearParameter);
        }
    
        public virtual int XP_payroll(Nullable<int> worker, Nullable<int> month, Nullable<int> year, Nullable<decimal> salary, Nullable<decimal> premiya, Nullable<decimal> total)
        {
            var workerParameter = worker.HasValue ?
                new ObjectParameter("worker", worker) :
                new ObjectParameter("worker", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(decimal));
    
            var premiyaParameter = premiya.HasValue ?
                new ObjectParameter("premiya", premiya) :
                new ObjectParameter("premiya", typeof(decimal));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("XP_payroll", workerParameter, monthParameter, yearParameter, salaryParameter, premiyaParameter, totalParameter);
        }
    
        public virtual int check_budget(Nullable<decimal> sumValue)
        {
            var sumValueParameter = sumValue.HasValue ?
                new ObjectParameter("sumValue", sumValue) :
                new ObjectParameter("sumValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("check_budget", sumValueParameter);
        }
    
        public virtual int insert_into_payroll(Nullable<int> empID, Nullable<int> year, Nullable<int> month)
        {
            var empIDParameter = empID.HasValue ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("month", month) :
                new ObjectParameter("month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_into_payroll", empIDParameter, yearParameter, monthParameter);
        }
    }
}
